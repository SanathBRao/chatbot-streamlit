import streamlit as st
import google.generativeai as genai
from PIL import Image
from io import BytesIO
import base64

# --- API Key Setup ---
genai.configure(api_key=st.secrets["GOOGLE_API_KEY"])

# --- Page Configuration ---
st.set_page_config(page_title="Gemini Chat + Image Generator", layout="centered")
st.title("🤖 Gemini Chat + 🖼️ Image Generator")

# --- Initialize Chatbot Model ---
chat_model = genai.GenerativeModel("gemini-pro")

# --- Chat History ---
if "chat_history" not in st.session_state:
    st.session_state.chat_history = []

# --- Chatbot Section ---
st.header("💬 Chatbot")

for msg in st.session_state.chat_history:
    with st.chat_message(msg["role"]):
        st.markdown(msg["content"])

user_input = st.chat_input("Type your message...")

if user_input:
    st.chat_message("user").markdown(user_input)
    st.session_state.chat_history.append({"role": "user", "content": user_input})

    with st.chat_message("assistant"):
        with st.spinner("Gemini is thinking..."):
            response = chat_model.generate_content(user_input)
            st.markdown(response.text)
            st.session_state.chat_history.append({"role": "assistant", "content": response.text})

# --- Image Generation Section ---
st.header("🖼️ Generate Image")

image_prompt = st.text_area("Enter image prompt", placeholder="e.g. Virat Kohli lifting the IPL trophy")

if st.button("Generate Image"):
    if not image_prompt.strip():
        st.warning("Please enter a valid prompt.")
    else:
        with st.spinner("Generating image using Gemini..."):
            try:
                image_model = genai.GenerativeModel("models/gemini-2.0-flash-preview-image-generation")

                response = image_model.generate_content(
                    contents=[{"text": image_prompt}],
                    stream=False
                )

                found_image = False
                for part in response.candidates[0].content.parts:
                    if hasattr(part, "inline_data") and part.inline_data.data:
                        image_data = base64.b64decode(part.inline_data.data)
                        image = Image.open(BytesIO(image_data))
                        st.image(image, caption="Generated by Gemini", use_column_width=True)
                        st.download_button("Download Image", image_data, file_name="gemini_generated_image.png")
                        found_image = True
                    elif hasattr(part, "text") and part.text:
                        st.write(part.text)

                if not found_image:
                    st.warning("⚠️ No image returned. Try a more descriptive or visual prompt.")

            except Exception as e:
                st.error(f"❌ Error generating image: {e}")
