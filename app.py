import streamlit as st
from PIL import Image
from io import BytesIO
import google.generativeai as genai
import base64

# --- Set up Gemini API key ---
GOOGLE_API_KEY = st.secrets["GOOGLE_API_KEY"]
genai.configure(api_key=GOOGLE_API_KEY)

# --- Streamlit page config ---
st.set_page_config(page_title="Gemini Image Generator", layout="centered")
st.title("üé® Image Generator using Google Gemini")

# --- Prompt input ---
image_prompt = st.text_area("Enter your image prompt", placeholder="e.g. Virat Kohli lifts IPL trophy")

if st.button("Generate Image"):
    if not image_prompt.strip():
        st.warning("Please enter a valid prompt.")
    else:
        with st.spinner("Generating image using Gemini..."):
            try:
                # --- Load the Gemini model ---
                model = genai.GenerativeModel(model_name="models/gemini-2.0-vision-preview")  # Replace with correct image-gen model

                # --- Generate content (TEXT + IMAGE) ---
                response = model.generate_content(
                    contents=[{"text": image_prompt}],
                    generation_config={},
                    stream=False,
                    response_mime_type="image/png"  # Optional and depends on SDK version
                )

                found_image = False
                for part in response.candidates[0].content.parts:
                    if hasattr(part, "text") and part.text:
                        st.subheader("Text Description")
                        st.write(part.text)

                    elif hasattr(part, "inline_data"):
                        # Decode base64 image data
                        image_data = base64.b64decode(part.inline_data.data)
                        image = Image.open(BytesIO(image_data))

                        st.subheader("Generated Image")
                        st.image(image, caption="Generated by Gemini", use_column_width=True)
                        st.download_button("Download Image", image_data, file_name="gemini_image.png")
                        found_image = True

                if not found_image:
                    st.warning("No image found in the response.")

            except Exception as e:
                st.error(f"‚ùå Error generating image: {e}")
