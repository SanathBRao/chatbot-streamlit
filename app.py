import streamlit as st
from langchain_google_genai import ChatGoogleGenerativeAI
from langchain_core.messages import HumanMessage, SystemMessage, AIMessage
from google.generativeai.types import GenerateContentConfig
from PIL import Image
from io import BytesIO
import os

# --- Set up API key securely ---
os.environ["GOOGLE_API_KEY"] = st.secrets["GOOGLE_API_KEY"]

# --- Page config ---
st.set_page_config(page_title="Gemini Chatbot", layout="centered")
st.title("ü§ñ Gemini Chatbot")

# --- Initialize model ---
llm = ChatGoogleGenerativeAI(model="gemini-2.0-flash")

# --- Initialize chat history in session state ---
if "chat_history" not in st.session_state:
    st.session_state.chat_history = [SystemMessage(content="You are a helpful assistant.")]

# --- Display previous chat messages ---
for msg in st.session_state.chat_history:
    role = "user" if isinstance(msg, HumanMessage) else "assistant"
    if isinstance(msg, (HumanMessage, AIMessage)):
        with st.chat_message(role):
            st.markdown(msg.content)

# --- Chat input ---
user_input = st.chat_input("Type your message...")

if user_input:
    # Add user message to chat history
    st.session_state.chat_history.append(HumanMessage(content=user_input))

    # Display user message
    with st.chat_message("user"):
        st.markdown(user_input)

    # Generate response from Gemini
    with st.chat_message("assistant"):
        with st.spinner("Thinking..."):
            response = llm.invoke(st.session_state.chat_history)
            st.markdown(response.content)

    # Add assistant response to chat history
    st.session_state.chat_history.append(AIMessage(content=response.content))
    # --- Image generation section ---
st.subheader("üñºÔ∏è Generate Image from Prompt")

# Input field for image prompt
image_prompt = st.text_area("Enter a prompt for image generation", placeholder="e.g. A futuristic city at sunset")

if st.button("Generate Image"):
    with st.spinner("Generating image and text..."):
        # Generate image from prompt
        contents = [{"text": image_prompt}]
        response = image_model.generate_content(contents)

        for part in response.candidates[0].content.parts:
            if hasattr(part, 'text') and part.text:
                st.subheader("Text Response")
                st.write(part.text)
            elif hasattr(part, 'inline_data') and part.inline_data:
                # Display the image
                image = Image.open(BytesIO(part.inline_data.data))
                st.subheader("Generated Image")
                st.image(image, caption="Generated by Gemini", use_column_width=True)
