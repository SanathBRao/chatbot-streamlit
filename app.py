import streamlit as st
from langchain_google_genai import ChatGoogleGenerativeAI
from langchain_core.messages import HumanMessage, SystemMessage, AIMessage
from PIL import Image
from io import BytesIO
import openai
import os


# --- Set up API keys securely ---
os.environ["GOOGLE_API_KEY"] = st.secrets["GOOGLE_API_KEY"]

# --- Page config ---
st.set_page_config(page_title="Gemini Chatbot + DALL·E 3 Image Generator", layout="centered")
st.title("🤖 Gemini Chatbot + 🎨 DALL·E 3 Image Generator")

# --- Initialize Gemini LLM via LangChain ---
llm = ChatGoogleGenerativeAI(model="gemini-2.0-flash")

# --- Initialize chat history ---
if "chat_history" not in st.session_state:
    st.session_state.chat_history = [SystemMessage(content="You are a helpful assistant.")]

# --- Display previous chat messages ---
for msg in st.session_state.chat_history:
    role = "user" if isinstance(msg, HumanMessage) else "assistant"
    if isinstance(msg, (HumanMessage, AIMessage)):
        with st.chat_message(role):
            st.markdown(msg.content)

# --- Chat input ---
user_input = st.chat_input("Type your message...")

if user_input:
    # Add user message
    st.session_state.chat_history.append(HumanMessage(content=user_input))

    # Show user input
    with st.chat_message("user"):
        st.markdown(user_input)

    # Generate Gemini response
    with st.chat_message("assistant"):
        with st.spinner("Thinking..."):
            response = llm.invoke(st.session_state.chat_history)
            st.markdown(response.content)

    # Add assistant message
    st.session_state.chat_history.append(AIMessage(content=response.content))

# --- Image Generation Section ---
st.divider()
st.subheader("🖼️ Generate Image using DALL·E 3")

# Image prompt input
image_prompt = st.text_area("Enter an image prompt", placeholder="e.g. A futuristic city at sunset, ultra realistic, cinematic lighting")

if st.button("Generate Image"):
    if image_prompt.strip() == "":
        st.warning("Please enter a prompt.")
    else:
        with st.spinner("Generating image..."):
            try:
                # DALL·E 3 API call
                response = openai.Image.create(
                    prompt=image_prompt,
                    model="dall-e-3",
                    n=1,
                    size="1024x1024"
                )
                image_url = response['data'][0]['url']
                image_data = requests.get(image_url).content
                image = Image.open(BytesIO(image_data))

                # Display image
                st.subheader("🎨 Generated Image")
                st.image(image, caption="Generated by DALL·E 3", use_column_width=True)

                # Optional: Download button
                st.download_button("Download Image", image_data, file_name="generated_image.png")

            except Exception as e:
                st.error(f"❌ Error generating image: {e}")
