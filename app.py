import streamlit as st
from langchain_google_genai import ChatGoogleGenerativeAI
from langchain_core.messages import HumanMessage, SystemMessage, AIMessage
import google.generativeai as genai
from PIL import Image
from io import BytesIO

# Configure your API key (set in Streamlit secrets)
GOOGLE_API_KEY = st.secrets["GOOGLE_API_KEY"]
genai.configure(api_key=GOOGLE_API_KEY)

# Initialize the chatbot LLM (Gemini text model)
chat_model = ChatGoogleGenerativeAI(model="gemini-2.0-flash")

st.set_page_config(page_title="Gemini Chatbot + Image Generator", layout="wide")
st.title("ü§ñ Gemini Chatbot + üé® Image + Text Generator")

# --- SESSION STATE for chat history ---
if "chat_history" not in st.session_state:
    st.session_state.chat_history = [SystemMessage(content="You are a helpful assistant.")]

# --- Display previous chat messages ---
for msg in st.session_state.chat_history:
    role = "user" if isinstance(msg, HumanMessage) else "assistant"
    if isinstance(msg, (HumanMessage, AIMessage)):
        with st.chat_message(role):
            st.markdown(msg.content)

# --- Chat input ---
user_message = st.chat_input("Chat with Gemini...")

if user_message:
    # Append user message
    st.session_state.chat_history.append(HumanMessage(content=user_message))

    # Display user message
    with st.chat_message("user"):
        st.markdown(user_message)

    # Generate response from chatbot
    with st.chat_message("assistant"):
        with st.spinner("Gemini is thinking..."):
            response = chat_model.invoke(st.session_state.chat_history)
            st.markdown(response.content)

    # Append assistant response
    st.session_state.chat_history.append(AIMessage(content=response.content))

st.markdown("---")

# --- Image + Text Generation section ---
st.subheader("üé® Generate Image + Text from Prompt")

image_text_prompt = st.text_area("Enter prompt for image + text generation", placeholder="e.g. Virat Kohli lifting IPL trophy")

if st.button("Generate Image + Text"):
    if not image_text_prompt.strip():
        st.warning("Please enter a valid prompt!")
    else:
        with st.spinner("Generating image and text with Gemini..."):
            try:
                model = genai.GenerativeModel(model_name="models/gemini-2.0-flash-preview-image-generation")

                response = model.generate_content(
                    contents=[{"text": image_text_prompt}],
                    response_modality=["TEXT", "IMAGE"]
                )

                # Show generated text and images
                for part in response.candidates[0].content.parts:
                    if hasattr(part, "text") and part.text:
                        st.markdown("### Generated Text")
                        st.write(part.text)
                    if hasattr(part, "inline_data") and part.inline_data:
                        image_bytes = BytesIO(part.inline_data.data)
                        image = Image.open(image_bytes)
                        st.image(image, caption="Generated by Gemini", use_column_width=True)

            except Exception as e:
                st.error(f"‚ùå Error generating content: {e}")
