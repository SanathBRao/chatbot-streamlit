import streamlit as st
from langchain_google_genai import ChatGoogleGenerativeAI
from langchain_core.messages import HumanMessage, SystemMessage, AIMessage
from PIL import Image
from io import BytesIO
import google.generativeai as genai
import base64
import os

# --- Set up API Key ---
os.environ["GOOGLE_API_KEY"] = st.secrets["GOOGLE_API_KEY"]
genai.configure(api_key=os.environ["GOOGLE_API_KEY"])

# --- Page Config ---
st.set_page_config(page_title="Gemini Chatbot + Image Generator", layout="centered")
st.title("🤖 Gemini Chatbot + 🎨 Image Generator")

# --- Chatbot Section ---
st.header("💬 Chat with Gemini")

# Initialize the chatbot model
chat_model = ChatGoogleGenerativeAI(model="gemini-2.0-pro")

# Initialize chat history
if "chat_history" not in st.session_state:
    st.session_state.chat_history = [SystemMessage(content="You are a helpful assistant.")]

# Display chat history
for msg in st.session_state.chat_history:
    role = "user" if isinstance(msg, HumanMessage) else "assistant"
    if isinstance(msg, (HumanMessage, AIMessage)):
        with st.chat_message(role):
            st.markdown(msg.content)

# Chat input
user_input = st.chat_input("Ask something...")

if user_input:
    st.session_state.chat_history.append(HumanMessage(content=user_input))

    with st.chat_message("user"):
        st.markdown(user_input)

    with st.chat_message("assistant"):
        with st.spinner("Thinking..."):
            response = chat_model.invoke(st.session_state.chat_history)
            st.markdown(response.content)

    st.session_state.chat_history.append(AIMessage(content=response.content))

# --- Image Generation Section ---
st.header("🖼️ Generate an Image")

image_prompt = st.text_area("Describe the image you want", placeholder="e.g. A futuristic city at sunset")

if st.button("Generate Image"):
    if not image_prompt.strip():
        st.warning("Please enter a valid image prompt.")
    else:
        with st.spinner("Generating image using Gemini..."):
            try:
                # Use image generation model
                image_model = genai.GenerativeModel("models/gemini-2.0-flash-preview-image-generation")

                # Generate response with text and image
                response = image_model.generate_content(
                    contents=[{"text": image_prompt}],
                    generation_config={},
                    stream=False
                )

                found_image = False
                for part in response.candidates[0].content.parts:
                    if hasattr(part, "text") and part.text:
                        st.subheader("Text Response")
                        st.write(part.text)

                    elif hasattr(part, "inline_data") and part.inline_data.data:
                        image_data = base64.b64decode(part.inline_data.data)
                        image = Image.open(BytesIO(image_data))
                        st.subheader("Generated Image")
                        st.image(image, caption="Generated by Gemini", use_column_width=True)
                        st.download_button("Download Image", image_data, file_name="gemini_image.png")
                        found_image = True

                if not found_image:
                    st.warning("No image returned from Gemini.")

            except Exception as e:
                st.error(f"❌ Error generating image: {e}")
